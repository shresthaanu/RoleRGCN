# -*- coding: utf-8 -*-
"""models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gzH4GY33iAcLyqRFuSoMaNqj9Kc4Txos
"""

import pandas as pd
import numpy as np
import os
import networkx as nx
from tqdm import tqdm 
from collections import Counter, defaultdict
import matplotlib.pyplot as plt
import random
from sklearn.metrics import roc_auc_score,f1_score,recall_score, mean_absolute_error, mean_squared_error, r2_score
from scipy import stats
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

# !pip install dgl
import dgl
# from dgl.data import DGLDataset
from dgl.nn import GraphConv,GATConv,SAGEConv,HeteroGraphConv


import torch
import torch.nn as nn
import torch.nn.functional as F
import dgl.function as fn


# Define a Heterograph Conv model
'''heterogeneous graph convolution module that first performs a separate graph convolution on each edge type, 
then sums the message aggregations on each edge type as the final result for all node types.'''
class RGCN_(nn.Module):
    '''2 input layers to bring input vetcors of each node types to same feature space 
    3 conv layers and 2 linear layers'''
    def __init__(self, in_feats_user,in_feats_news,in_feats_source, hid_feats, out_feats, rel_names):
        super().__init__()
        self.user_input1 = nn.Linear(in_feats_user, hid_feats)
        self.news_input1 = nn.Linear(in_feats_news, hid_feats)
        self.source_input1 = nn.Linear(in_feats_source, hid_feats)
        self.user_input2 = nn.Linear(hid_feats, hid_feats)
        self.news_input2 = nn.Linear(hid_feats, hid_feats)
        self.source_input2 = nn.Linear(hid_feats, hid_feats)
        
        self.user_layer = nn.Linear(hid_feats, out_feats)
        self.news_layer = nn.Linear(hid_feats, out_feats)
        self.source_layer = nn.Linear(hid_feats, out_feats)
        self.user_layer2 = nn.Linear(hid_feats*6+in_feats_user, hid_feats)
        self.news_layer2 = nn.Linear(hid_feats*6+in_feats_news, hid_feats)
        self.source_layer2 = nn.Linear(hid_feats*6+in_feats_source, hid_feats)
        # HeteroGraphConv takes in a dictionary of node types and node feature tensors as input, and returns another dictionary of node types and node features.
        self.input1 = {'user':self.user_input1,'news':self.news_input1,'source':self.source_input1}
        self.input2 = {'user':self.user_input2,'news':self.news_input2,'source':self.source_input2}
        self.conv1 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.conv2 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.conv3 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.conv4 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        self.lin1 = {'user':self.user_layer, 'news':self.news_layer, 'source':self.source_layer}
        self.lin2 = {'user':self.user_layer2, 'news':self.news_layer2, 'source':self.source_layer2}
        

    def forward(self, graph, inputs):
        # inputs are features of nodes
        l = [inputs] #collect node features and latent features generated in each layer to concat in linear layer
        h = {k: self.input1[k](inputs[k]) for k,v in inputs.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        # l.append(h)
        h = {k: self.input2[k](h[k]) for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        # l.append(h)
        h = self.conv1(graph, h)
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = self.conv2(graph,h)
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        # h = self.conv3(graph,h)
        # h = {k: F.tanh(v) for k, v in h.items()}
        # l.append(h)
        # h = self.conv4(graph,h)
        # h = {k: F.tanh(v) for k, v in h.items()}
        # l.append(h)
        # h = {k: self.lin2[k](torch.cat([s[k] for s in l],1)) for k, v in h.items()}
        h1 = h
        h = {k: self.lin1[k](h[k]) for k, v in h.items()}
        return h, h1


class RGCN1(nn.Module):
    def __init__(self, in_feats_user,in_feats_news,in_feats_source, hid_feats, out_feats, rel_names):
        super().__init__()
        self.user_input1 = nn.Linear(in_feats_user, hid_feats)
        self.news_input1 = nn.Linear(in_feats_news, hid_feats)
        self.source_input1 = nn.Linear(in_feats_source, hid_feats)
        self.user_input2 = nn.Linear(hid_feats, hid_feats)
        self.news_input2 = nn.Linear(hid_feats, hid_feats)
        self.source_input2 = nn.Linear(hid_feats, hid_feats)

        self.user_conv1 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv1 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv1 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        self.user_conv2 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv2 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv2 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')

        self.user_conv3 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv3 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv3 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')

        self.user_conv4 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv4 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv4 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        
        self.user_layer = nn.Linear(hid_feats, out_feats)
        self.news_layer = nn.Linear(hid_feats, out_feats)
        self.source_layer = nn.Linear(hid_feats, out_feats)
        self.user_layer2 = nn.Linear(hid_feats*6+in_feats_user, hid_feats)
        self.news_layer2 = nn.Linear(hid_feats*6+in_feats_news, hid_feats)
        self.source_layer2 = nn.Linear(hid_feats*6+in_feats_source, hid_feats)
        
        self.input1 = {'user':self.user_input1, 'news':self.news_input1, 'source':self.source_input1}
        self.input2 = {'user':self.user_input2, 'news':self.news_input2, 'source':self.source_input2}
        self.conv1 = {'user':self.user_conv1, 'news':self.news_conv1, 'source':self.source_conv1}
        self.conv2 = {'user':self.user_conv2, 'news':self.news_conv2, 'source':self.source_conv2}
        self.conv3 = {'user':self.user_conv3, 'news':self.news_conv3, 'source':self.source_conv3}
        self.conv4 = {'user':self.user_conv4, 'news':self.news_conv4, 'source':self.source_conv4}
        self.lin1 = {'user':self.user_layer, 'news':self.news_layer, 'source':self.source_layer}
        self.lin2 = {'user':self.user_layer2, 'news':self.news_layer2, 'source':self.source_layer2}
       
        

    def forward(self, graph, inputs):
        # inputs are features of nodes
        l = [inputs] #collect node features and latent features generated in each layer to concat in linear layer
        h = {k: self.input1[k](inputs[k]) for k,v in inputs.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.input2[k](h[k]) for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.conv1[k](graph, h)[k] for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.conv2[k](graph, h)[k] for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        # h = {k: self.conv3[k](graph, h)[k] for k,v in h.items()}
        # h = {k: F.tanh(v) for k, v in h.items()}
        # l.append(h)
        # h = {k: self.conv4[k](graph, h)[k] for k,v in h.items()}
        # h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        # h = {k: self.lin2[k](torch.cat([s[k] for s in l],1)) for k, v in h.items()}
        h1 = h
        h = {k: self.lin1[k](h[k]) for k, v in h.items()}
        return h, h1
        
class RGCN3(nn.Module):
    def __init__(self, in_feats_user,in_feats_news,in_feats_source, hid_feats, out_feats, rel_names):
        super().__init__()
        self.user_input1 = nn.Linear(in_feats_user, hid_feats)
        self.news_input1 = nn.Linear(in_feats_news, hid_feats)
        self.source_input1 = nn.Linear(in_feats_source, hid_feats)
        self.user_input2 = nn.Linear(hid_feats, hid_feats)
        self.news_input2 = nn.Linear(hid_feats, hid_feats)
        self.source_input2 = nn.Linear(hid_feats, hid_feats)

        self.user_conv1 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv1 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv1 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        self.user_conv2 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv2 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv2 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')

        self.user_conv3 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv3 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv3 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')

        self.user_conv4 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv4 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv4 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        
        self.user_layer = nn.Linear(hid_feats, out_feats)
        self.news_layer = nn.Linear(hid_feats, out_feats)
        self.source_layer = nn.Linear(hid_feats, out_feats)
        self.user_layer2 = nn.Linear(hid_feats*4+in_feats_user, hid_feats)
        self.news_layer2 = nn.Linear(hid_feats*4+in_feats_news, hid_feats)
        self.source_layer2 = nn.Linear(hid_feats*4+in_feats_source, hid_feats)
        
        self.input1 = {'user':self.user_input1, 'news':self.news_input1, 'source':self.source_input1}
        self.input2 = {'user':self.user_input2, 'news':self.news_input2, 'source':self.source_input2}
        self.conv1 = {'user':self.user_conv1, 'news':self.news_conv1, 'source':self.source_conv1}
        self.conv2 = {'user':self.user_conv2, 'news':self.news_conv2, 'source':self.source_conv2}
        self.conv3 = {'user':self.user_conv3, 'news':self.news_conv3, 'source':self.source_conv3}
        self.conv4 = {'user':self.user_conv4, 'news':self.news_conv4, 'source':self.source_conv4}
        self.lin1 = {'user':self.user_layer, 'news':self.news_layer, 'source':self.source_layer}
        self.lin2 = {'user':self.user_layer2, 'news':self.news_layer2, 'source':self.source_layer2}
       
        

    def forward(self, graph, inputs):
        # inputs are features of nodes
        l = [inputs] #collect node features and latent features generated in each layer to concat in linear layer
        h = {k: self.input1[k](inputs[k]) for k,v in inputs.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.input2[k](h[k]) for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.conv1[k](graph, h)[k] for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.conv2[k](graph, h)[k] for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        # h = {k: self.conv3[k](graph, h)[k] for k,v in h.items()}
        # h = {k: F.tanh(v) for k, v in h.items()}
        # l.append(h)
        # h = {k: self.conv4[k](graph, h)[k] for k,v in h.items()}
        # h = {k: F.tanh(v) for k, v in h.items()}
        # l.append(h)
        h = {k: self.lin2[k](torch.cat([s[k] for s in l],1)) for k, v in h.items()}
        h1 = h
        h = {k: self.lin1[k](h[k]) for k, v in h.items()}
        return h, h1

class RGCN2(nn.Module):
    def __init__(self, in_feats_user,in_feats_news,in_feats_source, hid_feats, out_feats, rel_names):
        super().__init__()
        self.user_input1 = nn.Linear(in_feats_user, hid_feats)
        self.news_input1 = nn.Linear(in_feats_news, hid_feats)
        self.source_input1 = nn.Linear(in_feats_source, hid_feats)
        self.follower_input1 = nn.Linear(in_feats_user, hid_feats)
        self.user_input2 = nn.Linear(hid_feats, hid_feats)
        self.news_input2 = nn.Linear(hid_feats, hid_feats)
        self.source_input2 = nn.Linear(hid_feats, hid_feats)
        self.follower_input2 = nn.Linear(hid_feats, hid_feats)

        self.user_conv1 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv1 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv1 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.follower_conv1 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        self.user_conv2 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv2 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv2 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.follower_conv2 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')

        self.user_conv3 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv3 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv3 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.follower_conv3 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')

        self.user_conv4 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv4 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv4 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.follower_conv4 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        
        self.user_layer = nn.Linear(hid_feats, out_feats)
        self.news_layer = nn.Linear(hid_feats, out_feats)
        self.source_layer = nn.Linear(hid_feats, out_feats)
        self.follower_layer = nn.Linear(hid_feats, out_feats)
        self.user_layer2 = nn.Linear(hid_feats*6+in_feats_user, hid_feats)
        self.news_layer2 = nn.Linear(hid_feats*6+in_feats_news, hid_feats)
        self.source_layer2 = nn.Linear(hid_feats*6+in_feats_source, hid_feats)
        self.follower_layer2 = nn.Linear(hid_feats*6+in_feats_source, hid_feats)
        
        self.input1 = {'user':self.user_input1, 'news':self.news_input1, 'source':self.source_input1, 'follower':self.follower_input1}
        self.input2 = {'user':self.user_input2, 'news':self.news_input2, 'source':self.source_input2, 'follower':self.follower_input2}
        self.conv1 = {'user':self.user_conv1, 'news':self.news_conv1, 'source':self.source_conv1, 'follower':self.follower_conv1}
        self.conv2 = {'user':self.user_conv2, 'news':self.news_conv2, 'source':self.source_conv2, 'follower':self.follower_conv2}
        self.conv3 = {'user':self.user_conv3, 'news':self.news_conv3, 'source':self.source_conv3, 'follower':self.follower_conv3}
        self.conv4 = {'user':self.user_conv4, 'news':self.news_conv4, 'source':self.source_conv4, 'follower':self.follower_conv4}
        self.lin1 = {'user':self.user_layer, 'news':self.news_layer, 'source':self.source_layer, 'follower':self.follower_layer}
        self.lin2 = {'user':self.user_layer2, 'news':self.news_layer2, 'source':self.source_layer2, 'follower':self.follower_layer2}
       
        

    def forward(self, graph, inputs):
        # inputs are features of nodes
        l = [inputs] #collect node features and latent features generated in each layer to concat in linear layer
        h = {k: self.input1[k](inputs[k]) for k,v in inputs.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.input2[k](h[k]) for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.conv1[k](graph, h)[k] for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.conv2[k](graph, h)[k] for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        # h = {k: self.conv3[k](graph, h)[k] for k,v in h.items()}
        # h = {k: F.tanh(v) for k, v in h.items()}
        # l.append(h)
        # h = {k: self.conv4[k](graph, h)[k] for k,v in h.items()}
        # h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        # h = {k: self.lin2[k](torch.cat([s[k] for s in l],1)) for k, v in h.items()}
        h1 = h
        h = {k: self.lin1[k](h[k]) for k, v in h.items()}
        return h, h1
        
class RGCN2_combine_losses(nn.Module):
    def __init__(self, in_feats_user,in_feats_news,in_feats_source, hid_feats, out_feats_user, out_feats_news, out_feats_source, rel_names):
        super().__init__()
        self.user_input1 = nn.Linear(in_feats_user, hid_feats)
        self.news_input1 = nn.Linear(in_feats_news, hid_feats)
        self.source_input1 = nn.Linear(in_feats_source, hid_feats)
        self.follower_input1 = nn.Linear(in_feats_user, hid_feats)
        self.user_input2 = nn.Linear(hid_feats, hid_feats)
        self.news_input2 = nn.Linear(hid_feats, hid_feats)
        self.source_input2 = nn.Linear(hid_feats, hid_feats)
        self.follower_input2 = nn.Linear(hid_feats, hid_feats)

        self.user_conv1 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv1 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv1 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.follower_conv1 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        self.user_conv2 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv2 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv2 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.follower_conv2 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')

        self.user_conv3 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv3 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv3 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.follower_conv3 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')

        self.user_conv4 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.news_conv4 = HeteroGraphConv({ rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.source_conv4 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        self.follower_conv4 = HeteroGraphConv({rel: GraphConv(hid_feats, hid_feats) for rel in rel_names}, aggregate='mean')
        
        
        self.user_layer = nn.Linear(hid_feats, out_feats_user)
        self.news_layer = nn.Linear(hid_feats, out_feats_news)
        self.source_layer = nn.Linear(hid_feats, out_feats_source)
        self.follower_layer = nn.Linear(hid_feats, out_feats_user)
        self.user_layer2 = nn.Linear(hid_feats*6+in_feats_user, hid_feats)
        self.news_layer2 = nn.Linear(hid_feats*6+in_feats_news, hid_feats)
        self.source_layer2 = nn.Linear(hid_feats*6+in_feats_source, hid_feats)
        self.follower_layer2 = nn.Linear(hid_feats*6+in_feats_source, hid_feats)
        
        self.input1 = {'user':self.user_input1, 'news':self.news_input1, 'source':self.source_input1, 'follower':self.follower_input1}
        self.input2 = {'user':self.user_input2, 'news':self.news_input2, 'source':self.source_input2, 'follower':self.follower_input2}
        self.conv1 = {'user':self.user_conv1, 'news':self.news_conv1, 'source':self.source_conv1, 'follower':self.follower_conv1}
        self.conv2 = {'user':self.user_conv2, 'news':self.news_conv2, 'source':self.source_conv2, 'follower':self.follower_conv2}
        self.conv3 = {'user':self.user_conv3, 'news':self.news_conv3, 'source':self.source_conv3, 'follower':self.follower_conv3}
        self.conv4 = {'user':self.user_conv4, 'news':self.news_conv4, 'source':self.source_conv4, 'follower':self.follower_conv4}
        self.lin1 = {'user':self.user_layer, 'news':self.news_layer, 'source':self.source_layer, 'follower':self.follower_layer}
        self.lin2 = {'user':self.user_layer2, 'news':self.news_layer2, 'source':self.source_layer2, 'follower':self.follower_layer2}
       
        

    def forward(self, graph, inputs):
        # inputs are features of nodes
        l = [inputs] #collect node features and latent features generated in each layer to concat in linear layer
        h = {k: self.input1[k](inputs[k]) for k,v in inputs.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.input2[k](h[k]) for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.conv1[k](graph, h)[k] for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h = {k: self.conv2[k](graph, h)[k] for k,v in h.items()}
        h = {k: F.tanh(v) for k, v in h.items()}
        l.append(h)
        h1 = h
        h = {k: self.lin1[k](h[k]) for k, v in h.items()}
        return h, h1
        

def eval(label_train,pred_train,label_test,pred_test):
  train_r2 = r2_score(label_train, pred_train)
  train_mae = mean_absolute_error(label_train, pred_train)
  train_mse = mean_squared_error(label_train, pred_train)
  train_rmse =  np.sqrt(train_mse)
  test_r2 = r2_score(label_test, pred_test) # closer the value of R2 to 1 better is the model performance
  test_mae = mean_absolute_error(label_test, pred_test)
  test_mse = mean_squared_error(label_test, pred_test)
  test_rmse =  np.sqrt(test_mse)
  return train_r2 ,train_mae, train_mse, train_rmse, test_r2, test_mae, test_mse, test_rmse
  
  
import seaborn as sns
sns.set_theme(style="darkgrid")

def plot(data, plot_loss=True):
  fig,ax = plt.subplots(figsize=(12, 6), dpi=80)
  for col in data.columns:
    if col not in ['epochs']:
      sns.lineplot('epochs',col, data=data, label = col, ax=ax, markers=True, dashes=False)
  if plot_loss:
    sns.lineplot(data, x="loss")
  plt.xlabel("# Epoch")
  plt.ylabel("scores")
  plt.legend(loc = 'lower right')
  plt.show()